
jb-EECE311-Lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08000680  08000680  00001680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000684  08000684  000020bc  2**0
                  CONTENTS
  4 .ARM          00000000  08000684  08000684  000020bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000684  08000684  000020bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000684  08000684  00001684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000688  08000688  00001688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  0800068c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  200000bc  08000748  000020bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08000748  000020e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000020bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024ba  00000000  00000000  000020ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007b8  00000000  00000000  000045a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000280  00000000  00000000  00004d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001bc  00000000  00000000  00004fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002457f  00000000  00000000  0000519c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003022  00000000  00000000  0002971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e398b  00000000  00000000  0002c73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001100c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000774  00000000  00000000  0011010c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00110880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000668 	.word	0x08000668

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	08000668 	.word	0x08000668

080001c8 <DAC_Channel1_Init>:
 */

#include "stm32l476xx.h"
#include "dac.h"

void DAC_Channel1_Init(){
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

	//Enable clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_DAC1EN;
 80001cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000248 <DAC_Channel1_Init+0x80>)
 80001ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80001d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000248 <DAC_Channel1_Init+0x80>)
 80001d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80001d6:	6593      	str	r3, [r2, #88]	@ 0x58

	//Disable DAC
	DAC->CR &= ~(DAC_CR_EN1 | DAC_CR_EN2);
 80001d8:	4b1c      	ldr	r3, [pc, #112]	@ (800024c <DAC_Channel1_Init+0x84>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a1b      	ldr	r2, [pc, #108]	@ (800024c <DAC_Channel1_Init+0x84>)
 80001de:	f023 1301 	bic.w	r3, r3, #65537	@ 0x10001
 80001e2:	6013      	str	r3, [r2, #0]

	//set DAC MODE to 000
	DAC->MCR &= ~(7<<16);
 80001e4:	4b19      	ldr	r3, [pc, #100]	@ (800024c <DAC_Channel1_Init+0x84>)
 80001e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80001e8:	4a18      	ldr	r2, [pc, #96]	@ (800024c <DAC_Channel1_Init+0x84>)
 80001ea:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80001ee:	63d3      	str	r3, [r2, #60]	@ 0x3c


	DAC->CR &= ~DAC_CR_TSEL1; // clear trigger selection bit
 80001f0:	4b16      	ldr	r3, [pc, #88]	@ (800024c <DAC_Channel1_Init+0x84>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a15      	ldr	r2, [pc, #84]	@ (800024c <DAC_Channel1_Init+0x84>)
 80001f6:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80001fa:	6013      	str	r3, [r2, #0]
	DAC->CR |= (5<< DAC_CR_TSEL1_Pos);
 80001fc:	4b13      	ldr	r3, [pc, #76]	@ (800024c <DAC_Channel1_Init+0x84>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a12      	ldr	r2, [pc, #72]	@ (800024c <DAC_Channel1_Init+0x84>)
 8000202:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8000206:	6013      	str	r3, [r2, #0]

	// Enable trigger for DAC channel 1
	DAC->CR |= DAC_CR_TEN1;
 8000208:	4b10      	ldr	r3, [pc, #64]	@ (800024c <DAC_Channel1_Init+0x84>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a0f      	ldr	r2, [pc, #60]	@ (800024c <DAC_Channel1_Init+0x84>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6013      	str	r3, [r2, #0]

	//Enable DAC
	DAC->CR |= DAC_CR_EN1;
 8000214:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <DAC_Channel1_Init+0x84>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0c      	ldr	r2, [pc, #48]	@ (800024c <DAC_Channel1_Init+0x84>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6013      	str	r3, [r2, #0]



	//Enable clock for GPIOA
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000220:	4b09      	ldr	r3, [pc, #36]	@ (8000248 <DAC_Channel1_Init+0x80>)
 8000222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000224:	4a08      	ldr	r2, [pc, #32]	@ (8000248 <DAC_Channel1_Init+0x80>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	//set I/O mode as analog
	GPIOA->MODER |= (3<<2*4);
 800022c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000236:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800023a:	6013      	str	r3, [r2, #0]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40021000 	.word	0x40021000
 800024c:	40007400 	.word	0x40007400

08000250 <main>:





int main(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	system_timer_config();		//system clock set to HSI16
 8000254:	f000 f8ce 	bl	80003f4 <system_timer_config>

	DAC_Channel1_Init();		//Initialize DAC
 8000258:	f7ff ffb6 	bl	80001c8 <DAC_Channel1_Init>

	TIM4_Init(); 				//Initialize tim4
 800025c:	f000 f8f4 	bl	8000448 <TIM4_Init>

    while (1) {
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <main+0x10>

08000264 <lookup_sin>:
/* 80 */ 0xfe0, 0xfe6, 0xfec, 0xff0, 0xff4,
/* 85 */ 0xff8, 0xffb, 0xffd, 0xffe, 0xfff,
/* 90 */ 0xfff
};

int lookup_sin(int angle){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	//angle = mod(angle,360);
	if(angle<90) return sin_table[angle];
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b59      	cmp	r3, #89	@ 0x59
 8000270:	dc04      	bgt.n	800027c <lookup_sin+0x18>
 8000272:	4a14      	ldr	r2, [pc, #80]	@ (80002c4 <lookup_sin+0x60>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800027a:	e01d      	b.n	80002b8 <lookup_sin+0x54>
	if(angle<180) return sin_table[180-angle];
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2bb3      	cmp	r3, #179	@ 0xb3
 8000280:	dc06      	bgt.n	8000290 <lookup_sin+0x2c>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8000288:	4a0e      	ldr	r2, [pc, #56]	@ (80002c4 <lookup_sin+0x60>)
 800028a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800028e:	e013      	b.n	80002b8 <lookup_sin+0x54>
	if(angle<270) return 4096- sin_table[angle-180];
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8000296:	da07      	bge.n	80002a8 <lookup_sin+0x44>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3bb4      	subs	r3, #180	@ 0xb4
 800029c:	4a09      	ldr	r2, [pc, #36]	@ (80002c4 <lookup_sin+0x60>)
 800029e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002a2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80002a6:	e007      	b.n	80002b8 <lookup_sin+0x54>
	return 4096-sin_table[360-angle];
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f5c3 73b4 	rsb	r3, r3, #360	@ 0x168
 80002ae:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <lookup_sin+0x60>)
 80002b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002b4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
}
 80002b8:	4618      	mov	r0, r3
 80002ba:	370c      	adds	r7, #12
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr
 80002c4:	20000004 	.word	0x20000004

080002c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <NMI_Handler+0x4>

080002d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d4:	bf00      	nop
 80002d6:	e7fd      	b.n	80002d4 <HardFault_Handler+0x4>

080002d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002dc:	bf00      	nop
 80002de:	e7fd      	b.n	80002dc <MemManage_Handler+0x4>

080002e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <BusFault_Handler+0x4>

080002e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <UsageFault_Handler+0x4>

080002f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000302:	bf00      	nop
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
	...

0800031c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(TimeDelay>0){
 8000320:	4b06      	ldr	r3, [pc, #24]	@ (800033c <SysTick_Handler+0x20>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d004      	beq.n	8000332 <SysTick_Handler+0x16>
		TimeDelay --;
 8000328:	4b04      	ldr	r3, [pc, #16]	@ (800033c <SysTick_Handler+0x20>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	3b01      	subs	r3, #1
 800032e:	4a03      	ldr	r2, [pc, #12]	@ (800033c <SysTick_Handler+0x20>)
 8000330:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000332:	f000 f961 	bl	80005f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000dc 	.word	0x200000dc

08000340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <SystemInit+0x20>)
 8000346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800034a:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <SystemInit+0x20>)
 800034c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00

08000364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	2b00      	cmp	r3, #0
 8000374:	db0b      	blt.n	800038e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f003 021f 	and.w	r2, r3, #31
 800037c:	4907      	ldr	r1, [pc, #28]	@ (800039c <__NVIC_EnableIRQ+0x38>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	2001      	movs	r0, #1
 8000386:	fa00 f202 	lsl.w	r2, r0, r2
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000e100 	.word	0xe000e100

080003a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	6039      	str	r1, [r7, #0]
 80003aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	db0a      	blt.n	80003ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	490c      	ldr	r1, [pc, #48]	@ (80003ec <__NVIC_SetPriority+0x4c>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	0112      	lsls	r2, r2, #4
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	440b      	add	r3, r1
 80003c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c8:	e00a      	b.n	80003e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4908      	ldr	r1, [pc, #32]	@ (80003f0 <__NVIC_SetPriority+0x50>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	f003 030f 	and.w	r3, r3, #15
 80003d6:	3b04      	subs	r3, #4
 80003d8:	0112      	lsls	r2, r2, #4
 80003da:	b2d2      	uxtb	r2, r2
 80003dc:	440b      	add	r3, r1
 80003de:	761a      	strb	r2, [r3, #24]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	e000e100 	.word	0xe000e100
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <system_timer_config>:
extern int angle;
extern unsigned int SOMETHING_COOL;



void system_timer_config(){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	// Enable HSI16 clock
	RCC->CR |= RCC_CR_HSION;
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <system_timer_config+0x50>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a11      	ldr	r2, [pc, #68]	@ (8000444 <system_timer_config+0x50>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000402:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY)); // Wait for HSI16 to be ready
 8000404:	bf00      	nop
 8000406:	4b0f      	ldr	r3, [pc, #60]	@ (8000444 <system_timer_config+0x50>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800040e:	2b00      	cmp	r3, #0
 8000410:	d0f9      	beq.n	8000406 <system_timer_config+0x12>

    // Set HSI16 as the system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <system_timer_config+0x50>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	4a0b      	ldr	r2, [pc, #44]	@ (8000444 <system_timer_config+0x50>)
 8000418:	f023 0303 	bic.w	r3, r3, #3
 800041c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI;
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <system_timer_config+0x50>)
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <system_timer_config+0x50>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);
 800042a:	bf00      	nop
 800042c:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <system_timer_config+0x50>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	f003 030c 	and.w	r3, r3, #12
 8000434:	2b04      	cmp	r3, #4
 8000436:	d1f9      	bne.n	800042c <system_timer_config+0x38>
}
 8000438:	bf00      	nop
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000

08000448 <TIM4_Init>:

void  TIM4_Init(){
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	//Enable Clock
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM4EN;
 800044c:	4b20      	ldr	r3, [pc, #128]	@ (80004d0 <TIM4_Init+0x88>)
 800044e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000450:	4a1f      	ldr	r2, [pc, #124]	@ (80004d0 <TIM4_Init+0x88>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6593      	str	r3, [r2, #88]	@ 0x58

	//Set the edge-aligned mode
	 TIM4->CR1 &= ~(TIM_CR1_CMS);
 8000458:	4b1e      	ldr	r3, [pc, #120]	@ (80004d4 <TIM4_Init+0x8c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a1d      	ldr	r2, [pc, #116]	@ (80004d4 <TIM4_Init+0x8c>)
 800045e:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8000462:	6013      	str	r3, [r2, #0]

	 //Set the output to be “trigger TRG0
	 TIM4->CR2 &= ~TIM_CR2_MMS; //clear bit
 8000464:	4b1b      	ldr	r3, [pc, #108]	@ (80004d4 <TIM4_Init+0x8c>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	4a1a      	ldr	r2, [pc, #104]	@ (80004d4 <TIM4_Init+0x8c>)
 800046a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800046e:	6053      	str	r3, [r2, #4]
	 TIM4->CR2 |=(4 << TIM_CR2_MMS_Pos); //set 0b100
 8000470:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <TIM4_Init+0x8c>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	4a17      	ldr	r2, [pc, #92]	@ (80004d4 <TIM4_Init+0x8c>)
 8000476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800047a:	6053      	str	r3, [r2, #4]

	 //Enable the trigger and update interrupts
	 TIM4->DIER |=TIM_DIER_TIE | TIM_DIER_UIE;
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <TIM4_Init+0x8c>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	4a14      	ldr	r2, [pc, #80]	@ (80004d4 <TIM4_Init+0x8c>)
 8000482:	f043 0341 	orr.w	r3, r3, #65	@ 0x41
 8000486:	60d3      	str	r3, [r2, #12]

	 //Set the PWM mode 1 output
	 TIM4->CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos);
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <TIM4_Init+0x8c>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a11      	ldr	r2, [pc, #68]	@ (80004d4 <TIM4_Init+0x8c>)
 800048e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000492:	6193      	str	r3, [r2, #24]


	 TIM4->PSC = 18;
 8000494:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <TIM4_Init+0x8c>)
 8000496:	2212      	movs	r2, #18
 8000498:	629a      	str	r2, [r3, #40]	@ 0x28
	 TIM4->ARR = 18;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <TIM4_Init+0x8c>)
 800049c:	2212      	movs	r2, #18
 800049e:	62da      	str	r2, [r3, #44]	@ 0x2c


	 TIM4->CCR1 =10;	//set 50% duty cycle
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <TIM4_Init+0x8c>)
 80004a2:	220a      	movs	r2, #10
 80004a4:	635a      	str	r2, [r3, #52]	@ 0x34

	 TIM4->CCER |= TIM_CCER_CC1E;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <TIM4_Init+0x8c>)
 80004a8:	6a1b      	ldr	r3, [r3, #32]
 80004aa:	4a0a      	ldr	r2, [pc, #40]	@ (80004d4 <TIM4_Init+0x8c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6213      	str	r3, [r2, #32]

	 //Enable the timer
	 TIM4->CR1 |= TIM_CR1_CEN;
 80004b2:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <TIM4_Init+0x8c>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a07      	ldr	r2, [pc, #28]	@ (80004d4 <TIM4_Init+0x8c>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6013      	str	r3, [r2, #0]

	 //enable the TIM4 interrupt
	 NVIC_SetPriority(TIM4_IRQn, 1);
 80004be:	2101      	movs	r1, #1
 80004c0:	201e      	movs	r0, #30
 80004c2:	f7ff ff6d 	bl	80003a0 <__NVIC_SetPriority>
	 NVIC_EnableIRQ(TIM4_IRQn);
 80004c6:	201e      	movs	r0, #30
 80004c8:	f7ff ff4c 	bl	8000364 <__NVIC_EnableIRQ>
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40000800 	.word	0x40000800

080004d8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	if((TIM4->SR & TIM_SR_CC1IF) != 0){
 80004de:	4b2c      	ldr	r3, [pc, #176]	@ (8000590 <TIM4_IRQHandler+0xb8>)
 80004e0:	691b      	ldr	r3, [r3, #16]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d042      	beq.n	8000570 <TIM4_IRQHandler+0x98>
		if(SOMETHING_COOL == 0){
 80004ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000594 <TIM4_IRQHandler+0xbc>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d11b      	bne.n	800052a <TIM4_IRQHandler+0x52>
			//Start of basic
			DAC->DHR12R1 = lookup_sin(angle >> 10); //update DAC
 80004f2:	4b29      	ldr	r3, [pc, #164]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	129b      	asrs	r3, r3, #10
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff feb3 	bl	8000264 <lookup_sin>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b26      	ldr	r3, [pc, #152]	@ (800059c <TIM4_IRQHandler+0xc4>)
 8000502:	609a      	str	r2, [r3, #8]

			angle+= step_size; //increment angle
 8000504:	4b24      	ldr	r3, [pc, #144]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <TIM4_IRQHandler+0xc8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4413      	add	r3, r2
 800050e:	4a22      	ldr	r2, [pc, #136]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 8000510:	6013      	str	r3, [r2, #0]

			//check if angle exceeds 360
			if(angle >= (360 << 10)){
 8000512:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f5b3 2fb4 	cmp.w	r3, #368640	@ 0x5a000
 800051a:	db23      	blt.n	8000564 <TIM4_IRQHandler+0x8c>
				angle -= (360 << 10);
 800051c:	4b1e      	ldr	r3, [pc, #120]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f5a3 23b4 	sub.w	r3, r3, #368640	@ 0x5a000
 8000524:	4a1c      	ldr	r2, [pc, #112]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	e01c      	b.n	8000564 <TIM4_IRQHandler+0x8c>
			}//end basic
		}else{//something cool begin
			int new_step_size = 1831; // frequency =220
 800052a:	f240 7327 	movw	r3, #1831	@ 0x727
 800052e:	607b      	str	r3, [r7, #4]
			DAC->DHR12R1 = lookup_sin(angle >> 10); //update DAC
 8000530:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	129b      	asrs	r3, r3, #10
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe94 	bl	8000264 <lookup_sin>
 800053c:	4602      	mov	r2, r0
 800053e:	4b17      	ldr	r3, [pc, #92]	@ (800059c <TIM4_IRQHandler+0xc4>)
 8000540:	609a      	str	r2, [r3, #8]
			angle+= new_step_size; //increment angle
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	4a13      	ldr	r2, [pc, #76]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 800054c:	6013      	str	r3, [r2, #0]
			if(angle >= (360 << 10)){
 800054e:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f5b3 2fb4 	cmp.w	r3, #368640	@ 0x5a000
 8000556:	db05      	blt.n	8000564 <TIM4_IRQHandler+0x8c>
				angle -= (360 << 10);
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f5a3 23b4 	sub.w	r3, r3, #368640	@ 0x5a000
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <TIM4_IRQHandler+0xc0>)
 8000562:	6013      	str	r3, [r2, #0]
			}
		}

		TIM4->SR &= ~TIM_SR_CC1IF; // clear flag
 8000564:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <TIM4_IRQHandler+0xb8>)
 8000566:	691b      	ldr	r3, [r3, #16]
 8000568:	4a09      	ldr	r2, [pc, #36]	@ (8000590 <TIM4_IRQHandler+0xb8>)
 800056a:	f023 0302 	bic.w	r3, r3, #2
 800056e:	6113      	str	r3, [r2, #16]
	}
	if((TIM4->SR & TIM_SR_UIF) !=0){
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <TIM4_IRQHandler+0xb8>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d005      	beq.n	8000588 <TIM4_IRQHandler+0xb0>
		TIM4->SR &= ~TIM_SR_UIF;
 800057c:	4b04      	ldr	r3, [pc, #16]	@ (8000590 <TIM4_IRQHandler+0xb8>)
 800057e:	691b      	ldr	r3, [r3, #16]
 8000580:	4a03      	ldr	r2, [pc, #12]	@ (8000590 <TIM4_IRQHandler+0xb8>)
 8000582:	f023 0301 	bic.w	r3, r3, #1
 8000586:	6113      	str	r3, [r2, #16]
	}
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40000800 	.word	0x40000800
 8000594:	20000000 	.word	0x20000000
 8000598:	200000d8 	.word	0x200000d8
 800059c:	40007400 	.word	0x40007400
 80005a0:	08000680 	.word	0x08000680

080005a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a8:	f7ff feca 	bl	8000340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480c      	ldr	r0, [pc, #48]	@ (80005e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ae:	490d      	ldr	r1, [pc, #52]	@ (80005e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <LoopForever+0xe>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c4:	4c0a      	ldr	r4, [pc, #40]	@ (80005f0 <LoopForever+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d2:	f000 f825 	bl	8000620 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005d6:	f7ff fe3b 	bl	8000250 <main>

080005da <LoopForever>:

LoopForever:
    b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80005e8:	0800068c 	.word	0x0800068c
  ldr r2, =_sbss
 80005ec:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80005f0:	200000e4 	.word	0x200000e4

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <HAL_IncTick+0x20>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_IncTick+0x24>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4413      	add	r3, r2
 8000608:	4a04      	ldr	r2, [pc, #16]	@ (800061c <HAL_IncTick+0x24>)
 800060a:	6013      	str	r3, [r2, #0]
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	200000ba 	.word	0x200000ba
 800061c:	200000e0 	.word	0x200000e0

08000620 <__libc_init_array>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	4d0d      	ldr	r5, [pc, #52]	@ (8000658 <__libc_init_array+0x38>)
 8000624:	4c0d      	ldr	r4, [pc, #52]	@ (800065c <__libc_init_array+0x3c>)
 8000626:	1b64      	subs	r4, r4, r5
 8000628:	10a4      	asrs	r4, r4, #2
 800062a:	2600      	movs	r6, #0
 800062c:	42a6      	cmp	r6, r4
 800062e:	d109      	bne.n	8000644 <__libc_init_array+0x24>
 8000630:	4d0b      	ldr	r5, [pc, #44]	@ (8000660 <__libc_init_array+0x40>)
 8000632:	4c0c      	ldr	r4, [pc, #48]	@ (8000664 <__libc_init_array+0x44>)
 8000634:	f000 f818 	bl	8000668 <_init>
 8000638:	1b64      	subs	r4, r4, r5
 800063a:	10a4      	asrs	r4, r4, #2
 800063c:	2600      	movs	r6, #0
 800063e:	42a6      	cmp	r6, r4
 8000640:	d105      	bne.n	800064e <__libc_init_array+0x2e>
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f855 3b04 	ldr.w	r3, [r5], #4
 8000648:	4798      	blx	r3
 800064a:	3601      	adds	r6, #1
 800064c:	e7ee      	b.n	800062c <__libc_init_array+0xc>
 800064e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000652:	4798      	blx	r3
 8000654:	3601      	adds	r6, #1
 8000656:	e7f2      	b.n	800063e <__libc_init_array+0x1e>
 8000658:	08000684 	.word	0x08000684
 800065c:	08000684 	.word	0x08000684
 8000660:	08000684 	.word	0x08000684
 8000664:	08000688 	.word	0x08000688

08000668 <_init>:
 8000668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066a:	bf00      	nop
 800066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800066e:	bc08      	pop	{r3}
 8000670:	469e      	mov	lr, r3
 8000672:	4770      	bx	lr

08000674 <_fini>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	bf00      	nop
 8000678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	469e      	mov	lr, r3
 800067e:	4770      	bx	lr
